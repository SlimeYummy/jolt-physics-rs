pub const DIK_ESCAPE: i32 = 0x01;
pub const DIK_1: i32 = 0x02;
pub const DIK_2: i32 = 0x03;
pub const DIK_3: i32 = 0x04;
pub const DIK_4: i32 = 0x05;
pub const DIK_5: i32 = 0x06;
pub const DIK_6: i32 = 0x07;
pub const DIK_7: i32 = 0x08;
pub const DIK_8: i32 = 0x09;
pub const DIK_9: i32 = 0x0A;
pub const DIK_0: i32 = 0x0B;
pub const DIK_MINUS: i32 = 0x0C; // - on main keyboard
pub const DIK_EQUALS: i32 = 0x0D;
pub const DIK_BACK: i32 = 0x0E; // backspace
pub const DIK_TAB: i32 = 0x0F;
pub const DIK_Q: i32 = 0x10;
pub const DIK_W: i32 = 0x11;
pub const DIK_E: i32 = 0x12;
pub const DIK_R: i32 = 0x13;
pub const DIK_T: i32 = 0x14;
pub const DIK_Y: i32 = 0x15;
pub const DIK_U: i32 = 0x16;
pub const DIK_I: i32 = 0x17;
pub const DIK_O: i32 = 0x18;
pub const DIK_P: i32 = 0x19;
pub const DIK_LBRACKET: i32 = 0x1A;
pub const DIK_RBRACKET: i32 = 0x1B;
pub const DIK_RETURN: i32 = 0x1C; // Enter on main keyboard
pub const DIK_LCONTROL: i32 = 0x1D;
pub const DIK_A: i32 = 0x1E;
pub const DIK_S: i32 = 0x1F;
pub const DIK_D: i32 = 0x20;
pub const DIK_F: i32 = 0x21;
pub const DIK_G: i32 = 0x22;
pub const DIK_H: i32 = 0x23;
pub const DIK_J: i32 = 0x24;
pub const DIK_K: i32 = 0x25;
pub const DIK_L: i32 = 0x26;
pub const DIK_SEMICOLON: i32 = 0x27;
pub const DIK_APOSTROPHE: i32 = 0x28;
pub const DIK_GRAVE: i32 = 0x29; // accent
pub const DIK_LSHIFT: i32 = 0x2A;
pub const DIK_BACKSLASH: i32 = 0x2B;
pub const DIK_Z: i32 = 0x2C;
pub const DIK_X: i32 = 0x2D;
pub const DIK_C: i32 = 0x2E;
pub const DIK_V: i32 = 0x2F;
pub const DIK_B: i32 = 0x30;
pub const DIK_N: i32 = 0x31;
pub const DIK_M: i32 = 0x32;
pub const DIK_COMMA: i32 = 0x33;
pub const DIK_PERIOD: i32 = 0x34; // . on main keyboard
pub const DIK_SLASH: i32 = 0x35; // / on main keyboard
pub const DIK_RSHIFT: i32 = 0x36;
pub const DIK_MULTIPLY: i32 = 0x37; // * on numeric keypad
pub const DIK_LMENU: i32 = 0x38; // left Alt
pub const DIK_SPACE: i32 = 0x39;
pub const DIK_CAPITAL: i32 = 0x3A;
pub const DIK_F1: i32 = 0x3B;
pub const DIK_F2: i32 = 0x3C;
pub const DIK_F3: i32 = 0x3D;
pub const DIK_F4: i32 = 0x3E;
pub const DIK_F5: i32 = 0x3F;
pub const DIK_F6: i32 = 0x40;
pub const DIK_F7: i32 = 0x41;
pub const DIK_F8: i32 = 0x42;
pub const DIK_F9: i32 = 0x43;
pub const DIK_F10: i32 = 0x44;
pub const DIK_NUMLOCK: i32 = 0x45;
pub const DIK_SCROLL: i32 = 0x46; // Scroll Lock
pub const DIK_NUMPAD7: i32 = 0x47;
pub const DIK_NUMPAD8: i32 = 0x48;
pub const DIK_NUMPAD9: i32 = 0x49;
pub const DIK_SUBTRACT: i32 = 0x4A; // - on numeric keypad
pub const DIK_NUMPAD4: i32 = 0x4B;
pub const DIK_NUMPAD5: i32 = 0x4C;
pub const DIK_NUMPAD6: i32 = 0x4D;
pub const DIK_ADD: i32 = 0x4E; // + on numeric keypad
pub const DIK_NUMPAD1: i32 = 0x4F;
pub const DIK_NUMPAD2: i32 = 0x50;
pub const DIK_NUMPAD3: i32 = 0x51;
pub const DIK_NUMPAD0: i32 = 0x52;
pub const DIK_DECIMAL: i32 = 0x53; // . on numeric keypad
pub const DIK_OEM_102: i32 = 0x56; // <> or \| on RT 102-key keyboard (Non-U.S.)
pub const DIK_F11: i32 = 0x57;
pub const DIK_F12: i32 = 0x58;
pub const DIK_F13: i32 = 0x64; // (NEC PC98)
pub const DIK_F14: i32 = 0x65; // (NEC PC98)
pub const DIK_F15: i32 = 0x66; // (NEC PC98)
pub const DIK_KANA: i32 = 0x70; // (Japanese keyboard)
pub const DIK_ABNT_C1: i32 = 0x73; // /? on Brazilian keyboard
pub const DIK_CONVERT: i32 = 0x79; // (Japanese keyboard)
pub const DIK_NOCONVERT: i32 = 0x7B; // (Japanese keyboard)
pub const DIK_YEN: i32 = 0x7D; // (Japanese keyboard)
pub const DIK_ABNT_C2: i32 = 0x7E; // Numpad . on Brazilian keyboard
pub const DIK_NUMPADEQUALS: i32 = 0x8D; // = on numeric keypad (NEC PC98)
pub const DIK_CIRCUMFLEX: i32 = 0x90; // (Japanese keyboard)
pub const DIK_AT: i32 = 0x91; // (NEC PC98)
pub const DIK_COLON: i32 = 0x92; // (NEC PC98)
pub const DIK_UNDERLINE: i32 = 0x93; // (NEC PC98)
pub const DIK_KANJI: i32 = 0x94; // (Japanese keyboard)
pub const DIK_STOP: i32 = 0x95; // (NEC PC98)
pub const DIK_AX: i32 = 0x96; // (Japan AX)
pub const DIK_UNLABELED: i32 = 0x97; // (J3100)
pub const DIK_NEXTTRACK: i32 = 0x99; // Next Track
pub const DIK_NUMPADENTER: i32 = 0x9C; // Enter on numeric keypad
pub const DIK_RCONTROL: i32 = 0x9D;
pub const DIK_MUTE: i32 = 0xA0; // Mute
pub const DIK_CALCULATOR: i32 = 0xA1; // Calculator
pub const DIK_PLAYPAUSE: i32 = 0xA2; // Play / Pause
pub const DIK_MEDIASTOP: i32 = 0xA4; // Media Stop
pub const DIK_VOLUMEDOWN: i32 = 0xAE; // Volume -
pub const DIK_VOLUMEUP: i32 = 0xB0; // Volume +
pub const DIK_WEBHOME: i32 = 0xB2; // Web home
pub const DIK_NUMPADCOMMA: i32 = 0xB3; // , on numeric keypad (NEC PC98)
pub const DIK_DIVIDE: i32 = 0xB5; // / on numeric keypad
pub const DIK_SYSRQ: i32 = 0xB7;
pub const DIK_RMENU: i32 = 0xB8; // right Alt
pub const DIK_PAUSE: i32 = 0xC5; // Pause
pub const DIK_HOME: i32 = 0xC7; // Home on arrow keypad
pub const DIK_UP: i32 = 0xC8; // UpArrow on arrow keypad
pub const DIK_PRIOR: i32 = 0xC9; // PgUp on arrow keypad
pub const DIK_LEFT: i32 = 0xCB; // LeftArrow on arrow keypad
pub const DIK_RIGHT: i32 = 0xCD; // RightArrow on arrow keypad
pub const DIK_END: i32 = 0xCF; // End on arrow keypad
pub const DIK_DOWN: i32 = 0xD0; // DownArrow on arrow keypad
pub const DIK_NEXT: i32 = 0xD1; // PgDn on arrow keypad
pub const DIK_INSERT: i32 = 0xD2; // Insert on arrow keypad
pub const DIK_DELETE: i32 = 0xD3; // Delete on arrow keypad
pub const DIK_LWIN: i32 = 0xDB; // Left Windows key
pub const DIK_RWIN: i32 = 0xDC; // Right Windows key
pub const DIK_APPS: i32 = 0xDD; // AppMenu key
pub const DIK_POWER: i32 = 0xDE; // System Power
pub const DIK_SLEEP: i32 = 0xDF; // System Sleep
pub const DIK_WAKE: i32 = 0xE3; // System Wake
pub const DIK_WEBSEARCH: i32 = 0xE5; // Web Search
pub const DIK_WEBFAVORITES: i32 = 0xE6; // Web Favorites
pub const DIK_WEBREFRESH: i32 = 0xE7; // Web Refresh
pub const DIK_WEBSTOP: i32 = 0xE8; // Web Stop
pub const DIK_WEBFORWARD: i32 = 0xE9; // Web Forward
pub const DIK_WEBBACK: i32 = 0xEA; // Web Back
pub const DIK_MYCOMPUTER: i32 = 0xEB; // My Computer
pub const DIK_MAIL: i32 = 0xEC; // Mail
pub const DIK_MEDIASELECT: i32 = 0xED; // Media Select

pub const DIK_BACKSPACE: i32 = DIK_BACK; // Backspace
pub const DIK_NUMPADSTAR: i32 = DIK_MULTIPLY; // * on numeric keypad
pub const DIK_LALT: i32 = DIK_LMENU; // left Alt
pub const DIK_CAPSLOCK: i32 = DIK_CAPITAL; // CapsLock
pub const DIK_NUMPADMINUS: i32 = DIK_SUBTRACT; // - on numeric keypad
pub const DIK_NUMPADPLUS: i32 = DIK_ADD; // + on numeric keypad
pub const DIK_NUMPADPERIOD: i32 = DIK_DECIMAL; // . on numeric keypad
pub const DIK_NUMPADSLASH: i32 = DIK_DIVIDE; // / on numeric keypad
pub const DIK_RALT: i32 = DIK_RMENU; // right Alt
pub const DIK_UPARROW: i32 = DIK_UP; // UpArrow on arrow keypad
pub const DIK_PGUP: i32 = DIK_PRIOR; // PgUp on arrow keypad
pub const DIK_LEFTARROW: i32 = DIK_LEFT; // LeftArrow on arrow keypad
pub const DIK_RIGHTARROW: i32 = DIK_RIGHT; // Right
pub const DIK_DOWNARROW: i32 = DIK_DOWN; // DownArrow on arrow keypad
pub const DIK_PGDN: i32 = DIK_NEXT; // PgDn on arrow keypad
